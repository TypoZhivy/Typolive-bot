import os
import openai
import logging
import requests
import random
from datetime import datetime
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
import schedule
import asyncio

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

if not TELEGRAM_TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
if not OPENAI_API_KEY:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
if not CHANNEL_ID:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
if not UNSPLASH_ACCESS_KEY:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è UNSPLASH_ACCESS_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# === Telegram-–±–æ—Ç ===
bot = Bot(token=TELEGRAM_TOKEN)

# === –¢–æ–ª—å–∫–æ —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º ===
MY_USER_ID = 375047802  # ‚Üê –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π Telegram ID

def is_authorized(update: Update) -> bool:
    return update.effective_user and update.effective_user.id == MY_USER_ID

# === OpenAI (OpenRouter) ===
openai.api_key = OPENAI_API_KEY
openai.api_base = "https://openrouter.ai/api/v1"

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
post_count = 0
last_post_time = None

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ ===
def generate_post():
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–π –ø–æ—Å—Ç –≤ —Å—Ç–∏–ª–µ '–¢–∏–ø–æ –∂–∏–≤—É', –Ω–∞ —Ç–µ–º—É —É—Å—Ç–∞–ª–æ—Å—Ç–∏, —Ç—Ä–µ–≤–æ–≥–∏, –∂–∏–∑–Ω–∏."
    logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter")
    response = openai.ChatCompletion.create(
        model="mistralai/mixtral-8x7b-instruct",
        messages=[{"role": "user", "content": prompt}]
    )
    content = response.choices[0].message["content"]
    logger.info("–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    return content

# === –ü–æ–¥–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ ===
def generate_image():
    keywords = ["tired", "anxiety", "life", "sadness", "urban"]
    query = random.choice(keywords)
    url = f"https://api.unsplash.com/photos/random?query={query}&client_id={UNSPLASH_ACCESS_KEY}"
    
    try:
        response = requests.get(url)
        data = response.json()
        image_url = data[0]["urls"]["regular"]
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ç–µ–º–µ: {query}")
        return image_url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return "https://placekitten.com/640/360"  # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

# === –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª ===
def post_to_channel():
    global post_count, last_post_time
    logger.info("–ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª")
    
    try:
        text = generate_post()
        image_url = generate_image()
        bot.send_photo(chat_id=CHANNEL_ID, photo=image_url, caption=text)
        
        post_count += 1
        last_post_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        logger.info(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {post_count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")

# === –ö–æ–º–∞–Ω–¥—ã Telegram ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        logger.warning("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /start")
        return
    await update.message.reply_text("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /report –∏–ª–∏ /createpost.")
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–≤–∞–ª /start")

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        logger.warning("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /report")
        return

    report_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {post_count}"
    if last_post_time:
        report_text += f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {last_post_time}"
    else:
        report_text += f"\n–ü–æ—Å—Ç—ã —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏—Å—å."

    await update.message.reply_text(report_text)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á—ë—Ç /report")

async def create_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        logger.warning("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /createpost")
        return
    text = generate_post()
    image_url = generate_image()
    await update.message.reply_photo(photo=image_url, caption=text)
    logger.info("–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é")

# === –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ===

# –ö–æ–º–∞–Ω–¥–∞ /admin ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        logger.warning("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /admin")
        return

    admin_text = "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n"
    admin_text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {post_count}\n"
    if last_post_time:
        admin_text += f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {last_post_time}"
    else:
        admin_text += "–ü–æ—Å—Ç—ã —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏—Å—å."

    admin_text += "\nüé¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    admin_text += "/createpostadmin - –†—É—á–Ω–æ–π –ø–æ—Å—Ç\n"
    admin_text += "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"

    await update.message.reply_text(admin_text)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è /admin")

# –ö–æ–º–∞–Ω–¥–∞ /createpostadmin ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤—Ä—É—á–Ω—É—é
async def create_post_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        logger.warning("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /createpostadmin")
        return

    text = generate_post()
    image_url = generate_image()
    await update.message.reply_photo(photo=image_url, caption=text)
    logger.info("–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

# –ö–æ–º–∞–Ω–¥–∞ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        logger.warning("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /stats")
        return

    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n–ü–æ—Å—Ç–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {post_count}\n"
    if last_post_time:
        stats_text += f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {last_post_time}"
    else:
        stats_text += "–ü–æ—Å—Ç—ã —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏—Å—å."

    await update.message.reply_text(stats_text)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ /stats")

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ===
def send_daily_report():
    if MY_USER_ID:
        report_text = f"üìã –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n–ü–æ—Å—Ç–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {post_count}"
        if last_post_time:
            report_text += f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {last_post_time}"
        else:
            report_text += f"\n–ü–æ—Å—Ç—ã —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏—Å—å."
        
        bot.send_message(chat_id=MY_USER_ID, text=report_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {MY_USER_ID}")

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
async def run_schedule():
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("report", report))
    application.add_handler(CommandHandler("createpost", create_post))
    application.add_handler(CommandHandler("admin", admin))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /admin
    application.add_handler(CommandHandler("createpostadmin", create_post_admin))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /createpostadmin
    application.add_handler(CommandHandler("stats", stats))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /stats

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
    schedule.every().day.at("09:00").do(post_to_channel)
    schedule.every().day.at("12:00").do(post_to_channel)
    schedule.every().day.at("15:00").do(post_to_channel)
    schedule.every().day.at("18:00").do(post_to_channel)
    schedule.every().day.at("21:00").do(post_to_channel)

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
    schedule.every().day.at("22:00").do(send_daily_report)

    async def run():
        asyncio.create_task(run_schedule())
        await application.run_polling()

    asyncio.run(run())

if __name__ == "__main__":
    main()
